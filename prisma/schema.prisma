// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int       @id @default(autoincrement()) @map(name: "user_id")
  documentType String    @map(name: "document_type")
  dni          String    @unique @map(name: "dni")
  name         String    @map(name: "name")
  surnames     String    @map(name: "surnames")
  phone        String?   @map(name: "phone")
  address      String?   @map(name: "address")
  email        String?   @map(name: "email")
  photo        String?   @map(name: "photo")
  birthDate    DateTime? @map(name: "birth_date")
  sex          String?   @map(name: "sex")
  civilStatus  String?   @map(name: "civil_status")

  appointments         Appointment[]
  appointmentHistories AppointmentHistory[]
  access               Access[]
  notifications        Notification[]
  Payment              Payment[]
  dependents           Dependent[]
  Doctor               Doctor?

  @@map(name: "user")
}

model Dependent {
  dependentId  Int       @id @default(autoincrement()) @map(name: "dependent_id")
  documentType String    @map(name: "document_type")
  dni          String    @unique @map(name: "dni")
  name         String    @map(name: "name")
  surnames     String    @map(name: "surnames")
  address      String?   @map(name: "address")
  photo        String?   @map(name: "photo")
  birthDate    DateTime? @map(name: "birth_date")
  sex          String?   @map(name: "sex")
  userId       Int       @map(name: "user_id")
  user         User      @relation(fields: [userId], references: [userId])

  @@map(name: "dependent")
}

model Access {
  accessId    Int       @id @default(autoincrement()) @map(name: "access_id")
  username    String    @unique @map(name: "username")
  password    String    @map(name: "password")
  status      String?   @map(name: "status")
  active      Boolean?  @default(true) @map("active")
  lastSession DateTime? @map(name: "last_session")
  createAt    DateTime? @map(name: "create_at")
  userId      Int       @map(name: "user_id")
  roleId      Int       @map(name: "role_id")
  user        User      @relation(fields: [userId], references: [userId])
  role        Role      @relation(fields: [roleId], references: [roleId])

  @@map(name: "access")
}

model Appointment {
  appointmentId        Int                  @id @default(autoincrement()) @map(name: "appointment_id")
  origin               String               @map(name: "origin")
  dateTime             DateTime             @map(name: "date_time")
  status               String               @map(name: "status")
  notes                String?              @map(name: "notes")
  createAt             DateTime             @map("create_at")
  doctorId             Int                  @map(name: "doctor_id")
  userId               Int                  @map(name: "user_id")
  appointmentServices  AppointmentService[]
  appointmentHistories AppointmentHistory[]
  payments             Payment[]
  doctor               Doctor               @relation(fields: [doctorId], references: [doctorId])
  user                 User                 @relation(fields: [userId], references: [userId])

  @@map(name: "appointment")
}

model MedicalService {
  medicalServiceId    Int                  @id @default(autoincrement()) @map(name: "medical_service_id")
  name                String               @map(name: "name")
  code                String               @unique @map(name: "code")
  generalPrice        Float?               @map(name: "general_price")
  prerequisites       String?              @map(name: "prerequisites")
  appointmentServices AppointmentService[]
  personalizedPrices  PersonalizedPrice[]

  @@map(name: "medical_service")
}

model AppointmentService {
  appointmentId    Int            @map(name: "appointment_id")
  medicalServiceId Int            @map(name: "medical_service_id")
  appointment      Appointment    @relation(fields: [appointmentId], references: [appointmentId])
  medicalService   MedicalService @relation(fields: [medicalServiceId], references: [medicalServiceId])

  @@id([appointmentId, medicalServiceId])
  @@map(name: "appointment_service")
}

model CashRegisterTransaction {
  transactionId   Int          @id @default(autoincrement()) @map(name: "transaction_id")
  transactionDate DateTime     @map(name: "transaction_date")
  transactionType String       @map(name: "transaction_type")
  amount          Float        @map(name: "amount")
  description     String?      @map(name: "description")
  cashRegisterId  Int          @map(name: "cash_register_id")
  voucherNumber   Int          @map(name: "voucher_number")
  cashRegister    CashRegister @relation(fields: [cashRegisterId], references: [cashRegisterId])
  Payment         Payment?     @relation(fields: [paymentId], references: [paymentId])
  paymentId       Int?

  @@map(name: "cash_register_transaction")
}

model CashRegister {
  cashRegisterId           Int                       @id @default(autoincrement()) @map(name: "cash_register_id")
  openingBalance           Float                     @map(name: "opening_balance")
  currentBalance           Float                     @map(name: "current_balance")
  lastUpdated              DateTime                  @map(name: "last_updated")
  cashRegisterTransactions CashRegisterTransaction[]
  Admissionist             Admissionist?             @relation(fields: [admissionistId], references: [admissionistId])
  admissionistId           Int?                      @map(name: "admissionist_id")

  @@map(name: "cash_register")
}

model Payment {
  paymentId               Int                       @id @default(autoincrement()) @map(name: "payment_id")
  voucherNumber           String                    @unique @map(name: "voucher_number")
  amount                  Float                     @map(name: "amount")
  paymentDate             DateTime                  @map(name: "payment_date")
  appointmentId           Int                       @map(name: "appointment_id")
  paymentMethodId         Int                       @map(name: "payment_method_id")
  invoiceTypeId           Int                       @map(name: "invoice_type_id")
  appointment             Appointment               @relation(fields: [appointmentId], references: [appointmentId])
  paymentMethod           PaymentMethod             @relation(fields: [paymentMethodId], references: [paymentMethodId])
  invoiceType             InvoiceType               @relation(fields: [invoiceTypeId], references: [invoiceTypeId])
  cashRegisterTransaction CashRegisterTransaction[]
  Admissionist            Admissionist?             @relation(fields: [admissionistId], references: [admissionistId])
  admissionistId          Int?                      @map(name: "admissionist_id")
  User                    User?                     @relation(fields: [userId], references: [userId])
  userId                  Int?

  @@map(name: "payment")
}

model PersonalizedPrice {
  personalizedPriceId Int            @id @default(autoincrement()) @map(name: "personalized_price_id")
  personalizedPrice   Float          @map(name: "personalized_price")
  doctorId            Int            @map(name: "doctor_id")
  medicalServiceId    Int            @map(name: "medical_service_id")
  doctor              Doctor         @relation(fields: [doctorId], references: [doctorId])
  medicalService      MedicalService @relation(fields: [medicalServiceId], references: [medicalServiceId])

  @@map(name: "personalized_price")
}

model AppointmentHistory {
  appointmentHistoryId Int         @id @default(autoincrement()) @map(name: "appointment_history_id")
  diagnosis            String      @map(name: "diagnosis")
  treatment            String      @map(name: "treatment")
  userId               Int         @map(name: "user_id")
  doctorId             Int         @map(name: "doctor_id")
  appointmentId        Int         @map(name: "appointment_id")
  user                 User        @relation(fields: [userId], references: [userId])
  doctor               Doctor      @relation(fields: [doctorId], references: [doctorId])
  appointment          Appointment @relation(fields: [appointmentId], references: [appointmentId])

  @@map(name: "appointment_history")
}

model Notification {
  notificationId Int      @id @default(autoincrement()) @map(name: "notification_id")
  datetime       DateTime @map(name: "datetime")
  method         String   @map(name: "method")
  message        String   @map(name: "message")
  userId         Int      @map(name: "user_id")
  user           User     @relation(fields: [userId], references: [userId])

  @@map(name: "notification")
}

model Role {
  roleId Int      @id @default(autoincrement()) @map(name: "role_id")
  name   String   @unique @map(name: "name")
  user   Access[]

  @@map(name: "role")
}

model PaymentMethod {
  paymentMethodId Int       @id @default(autoincrement()) @map(name: "payment_method_id")
  name            String    @unique @map(name: "name")
  payments        Payment[]

  @@map(name: "payment_method")
}

model InvoiceType {
  invoiceTypeId Int       @id @default(autoincrement()) @map(name: "invoice_type_id")
  name          String    @unique @map(name: "name")
  payments      Payment[]

  @@map(name: "invoice_type")
}

model Schedule {
  scheduleId        Int      @id @default(autoincrement()) @map(name: "schedule_id")
  day               DateTime @unique @map(name: "day")
  startTime         String   @map(name: "start_time")
  endTime           String   @map(name: "end_time")
  interval          DateTime @map("interval")
  capacity          Int      @map(name: "capacity")
  availableSchedule Boolean  @map(name: "available_schedule")
  doctorId          Int      @map(name: "doctor_id")
  doctor            Doctor   @relation(fields: [doctorId], references: [doctorId])

  timeSlot TimeSlot[]

  @@map(name: "schedule")
}

model TimeSlot {
  timeSlotId    Int       @id @default(autoincrement()) @map(name: "time_slot_id")
  orderlyTurn   DateTime  @map("orderly_turn")
  nTurn         Int       @map("n_turn")
  availableTurn Boolean   @map(name: "available_turn")
  Schedule      Schedule? @relation(fields: [scheduleId], references: [scheduleId])
  scheduleId    Int

  @@map(name: "timeSlot")
}

model Doctor {
  doctorId       Int     @id @default(autoincrement()) @map(name: "doctor_id")
  specialization String  @map(name: "specialization")
  status         Boolean @map(name: "status")
  cmp            String? @unique @map(name: "cmp")
  rne            String? @unique @map(name: "rne")
  user           User    @relation(fields: [userId], references: [userId])
  userId         Int     @unique @map(name: "user_id")

  personalizedPrices   PersonalizedPrice[]
  appointmentHistories AppointmentHistory[]
  schedules            Schedule[]
  Appointment          Appointment[]

  @@map(name: "doctor")
}

model Admissionist {
  admissionistId Int @id @default(autoincrement()) @map(name: "admissionist_id")

  Payment      Payment[]
  CashRegister CashRegister[]

  @@map(name: "admissionist")
}
